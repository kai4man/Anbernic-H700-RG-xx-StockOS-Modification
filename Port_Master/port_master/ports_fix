#!/bin/bash
# make by G.R.H

# Command line schema
# $1 = ports
# $2 = Game/port script (/mnt/mmc/Roms/CPS2/avsp.zip)

controlfolder="/roms/ports/PortMaster"
device_info_txt="${controlfolder}/device_info.txt"
funcs_txt="${controlfolder}/funcs.txt"
control_txt="${controlfolder}/control.txt"
gamecontrollerdb_txt="${controlfolder}/gamecontrollerdb.txt"
libgl_Stock_txt="${controlfolder}/libgl_Ubuntu.txt"
mod_Stock_txt="${controlfolder}/mod_Ubuntu.txt"
stock_path="${controlfolder}/Ubuntu"
fix_flg="make by G.R.H"

if [ -f "$device_info_txt" ] && ! grep -q "$fix_flg" "$device_info_txt"; then
    sed -i '2i # make by G.R.H' "$device_info_txt"
    line1=$(grep -n 'DEVICE_NAME=$(cat /storage/.config/device)' "$device_info_txt" | cut -d ":" -f 1)
    line2=$(expr $line1 + 1)
    sed -i ''${line2}'i\        DEVICE_NAME=${device_name_mapping[$DEVICE_NAME]}' "$device_info_txt"
    sed -i ''${line2}'i\        DEVICE_NAME=$(cat /mnt/vendor/oem/board.ini)' "$device_info_txt"
    sed -i ''${line2}'i\)' "$device_info_txt"
    sed -i ''${line2}'i\            ["RGcubexx"]="RGCUBEXX-H"' "$device_info_txt"
    sed -i ''${line2}'i\            ["RG40xxV"]="RG40XX-V"' "$device_info_txt"
    sed -i ''${line2}'i\            ["RG40xxH"]="RG40XX-H"' "$device_info_txt"
    sed -i ''${line2}'i\            ["RG35xxSP"]="RG35XX-SP"' "$device_info_txt"
    sed -i ''${line2}'i\            ["RG35xxPRO"]="RG35XX-PRO"' "$device_info_txt"
    sed -i ''${line2}'i\            ["RG35xxH"]="RG35XX-H"' "$device_info_txt"
    sed -i ''${line2}'i\            ["RG35xx+_P"]="RG35XX-PLUS"' "$device_info_txt"
    sed -i ''${line2}'i\            ["RG34xxSP"]="RG34XX-SP"' "$device_info_txt"
    sed -i ''${line2}'i\            ["RG34xx"]="RG34XX-H"' "$device_info_txt"
    sed -i ''${line2}'i\            ["RG28xx"]="RG28XX-H"' "$device_info_txt"
    sed -i ''${line2}'i\        declare -A device_name_mapping=(' "$device_info_txt"
    sed -i ''${line2}'i\    elif [[ "$CFW_NAME" == "Ubuntu" ]] && [[ -f "/mnt/vendor/oem/board.ini" ]]; then' "$device_info_txt"
    sed -i ''${line2}'i\\' "$device_info_txt"
fi

if [ -f "$control_txt" ] && ! grep -q "$fix_flg" "$control_txt"; then
    sed -i '2i # make by G.R.H' "$control_txt"
    sed -i 's/    DEVICE="${1}"/    DEVICE="19000000010000000100000000010000"/g' "$control_txt"
    sed -i 's/param_device="${2}"/    param_device="anbernic"/g' "$control_txt"
    cat << '__CONTROL__' >> "$control_txt"

CUR_TTY=/dev/null
export HOME="/root"
mkdir -p ~/.local/share
mkdir -p ~/.config
controlfolder="/roms/ports/PortMaster"

SH_DIR="$(cd $(dirname "$0"); pwd)"
directory="mnt/$(echo "$SH_DIR" | cut -d '/' -f3)/Roms"

DSIPLAY_ID="$(cat /sys/class/power_supply/axp2202-battery/display_id)"
if [[ $DSIPLAY_ID == "1" ]]; then
  AUDIODEV=hw:2,0
else
  if [ -f "/roms/lib64/libSDL2-2.0.so.0.2800.6" ]; then
    LD_PRELOAD=/roms/lib64/libSDL2-2.0.so.0.2800.6
  fi
fi
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib32
raloc="/mnt/vendor/deep/retro"
raconf="--config /.config/retroarch/retroarch.cfg"
if [[ -e "/dev/input/by-path/platform-soc@03000000:gpio_keys-event-joystick" ]]; then
    echo 1 > /sys/class/power_supply/axp2202-battery/nds_esckey
    dpid=`ps -A| grep "portsCtrl.dge"| awk 'NR==1{print $1}'`
    if [ ${dpid} ]; then
        echo "had run portsCtrl.dge"
    else
        /mnt/vendor/bin/portsCtrl.dge &
    fi
fi

__CONTROL__
fi

if [ -f "$gamecontrollerdb_txt" ] && ! grep -q "$fix_flg" "$gamecontrollerdb_txt"; then
    cat << '__GAMECONTROLLERDB__' >> "$gamecontrollerdb_txt"

# make by G.R.H
19000000010000000100000000010000,ANBERNIC-keys,a:b0,b:b1,x:b3,y:b2,back:b8,guide:b6,start:b7,leftstick:b9,rightstick:b12,leftshoulder:b4,rightshoulder:b5,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b10,righttrigger:b11,platform:Linux,

__GAMECONTROLLERDB__
fi

if [ ! -f "$mod_Stock_txt" ]; then
    cat << '__MOD_STOCK__' > "$mod_Stock_txt"
#!/bin/bash
#
# SPDX-License-Identifier: MIT
#

## Modular - STOCKOS
# 
# A modular file that is sourced for specific script lines required by ports running on STOCKOS.
#
# usage `[ -f "${controlfolder}/mod_${CFW_NAME}.txt" ] && source "${controlfolder}/mod_${CFW_NAME}.txt"`

# Set the virtual screen
CUR_TTY="/dev/null"

# Use for Godot 2
GODOT2_OPTS="-r ${DISPLAY_WIDTH}x${DISPLAY_HEIGHT} -f"

# Use for Godot 3+
GODOT_OPTS="--resolution ${DISPLAY_WIDTH}x${DISPLAY_HEIGHT} -f"

pm_platform_helper() {
    # Help keep XongleBongles sanity below
    echo ""
}

__MOD_STOCK__
fi

if [ ! -f "$libgl_Stock_txt" ]; then
    cat << '__LIBGL_STOCK__' > "$libgl_Stock_txt"
#!/bin/bash
#
# SPDX-License-Identifier: MIT
#
# NOTE: This script uses $PWD to setup the GL4ES directory!
# Before calling this, ensure you are on the port root directory, e.g.:
# > gamedir="/$directory/ports/stardewvalley"
# > cd "$gamedir/"

export LIBGL_ES=2
export LIBGL_GL=21
export LIBGL_FB=3

# If the dri device does not exist, then let's not use
# the gbm backend.
if [ ! -e "/dev/dri/card0" ]; then
  export LIBGL_FB=2
fi

if [ -d "$PWD/gl4es.$DEVICE_ARCH" ]; then
  export LD_LIBRARY_PATH="$PWD/gl4es.$DEVICE_ARCH:$LD_LIBRARY_PATH"
elif [ -d "$PWD/gl4es" ]; then
  export LD_LIBRARY_PATH="$PWD/gl4es:$LD_LIBRARY_PATH"
fi

# This sets up the standard libs directory.
if [ -d "$PWD/libs.$DEVICE_ARCH" ]; then
  export LD_LIBRARY_PATH="$PWD/libs.$DEVICE_ARCH:$LD_LIBRARY_PATH"
elif [ -d "$PWD/libs" ]; then
  export LD_LIBRARY_PATH="$PWD/libs:$LD_LIBRARY_PATH"
fi

__LIBGL_STOCK__
fi

if [ ! -d "$stock_path" ]; then
    mkdir -p "$stock_path"
    cp -f "$control_txt" "$stock_path"
    cp -f "$gamecontrollerdb_txt" "$stock_path"
    cat << '__PORTMASTER__' > "$stock_path/PortMaster.txt"
#!/bin/bash
# make by G.R.H
#
# SPDX-License-Identifier: MIT
#

## HRMMM
export HOME="/root"
DSIPLAY_ID="$(cat /sys/class/power_supply/axp2202-battery/display_id)"
if [[ $DSIPLAY_ID == "1" ]]; then
  AUDIODEV=hw:2,0
else
  if [ -f "/roms/lib64/libSDL2-2.0.so.0.2800.6" ]; then
    LD_PRELOAD=/roms/lib64/libSDL2-2.0.so.0.2800.6
  fi
fi

controlfolder="/roms/ports/PortMaster"

SH_DIR="$(cd $(dirname "$0"); pwd)"
directory="mnt/$(echo "$SH_DIR" | cut -d '/' -f3)/Roms"

# MIYOO_EXtra shit i need.
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib32

ESUDO=""
ESUDOKILL="-1" # for 351Elec and EmuELEC use "-1" (numeric one) or "-k" 
export SDL_GAMECONTROLLERCONFIG_FILE="/usr/lib/gamecontrollerdb.txt"
# export SDL_GAMECONTROLLERCONFIG=$(grep "Deeplay" "/usr/lib/gamecontrollerdb.txt")

source "$controlfolder/device_info.txt"
[ -f "${controlfolder}/mod_${CFW_NAME}.txt" ] && source "${controlfolder}/mod_${CFW_NAME}.txt"

## TODO: Change to PortMaster/tty when Johnnyonflame merges the changes in,
CUR_TTY=/dev/null

cd "$controlfolder"

exec > >(tee "$controlfolder/log.txt") 2>&1

source "$controlfolder/utils/pmsplash.txt"

## Autoinstallation Code
# This will automatically install zips found within the PortMaster/autoinstall directory using harbourmaster
AUTOINSTALL=$(find "$controlfolder/autoinstall" -type f \( -name "*.zip" -o -name "*.squashfs" \))
if [ -n "$AUTOINSTALL" ]; then
  source "$controlfolder/PortMasterDialog.txt"

  GW=$(PortMasterIPCheck)
  PortMasterDialogInit "no-check"

  PortMasterDialog "messages_begin"

  PortMasterDialog "message" "Auto-installation"

  # Install the latest runtimes.zip
  if [ -f "$controlfolder/autoinstall/runtimes.zip" ]; then
    PortMasterDialog "message" "- Installing runtimes.zip, this could take a minute or two."
    $ESUDO unzip -o "$controlfolder/autoinstall/runtimes.zip" -d "$controlfolder/libs"
    $ESUDO rm -f "$controlfolder/autoinstall/runtimes.zip"
    PortMasterDialog "message" "- SUCCESS: runtimes.zip"
  fi

  for file_name in "$controlfolder/autoinstall"/*.squashfs
  do
    if [ ! -f "$file_name" ]; then
      continue
    fi

    $ESUDO mv -f "$file_name" "$controlfolder/libs"
    PortMasterDialog "message" "- SUCCESS: $(basename $file_name)"
  done

  for file_name in "$controlfolder/autoinstall"/*.zip
  do
    if [ ! -f "$file_name" ]; then
      continue
    fi

    if [[ "$(basename $file_name)" == "PortMaster.zip" ]]; then
      continue
    fi

    if [[ $(PortMasterDialogResult "install" "$file_name") == "OKAY" ]]; then
      $ESUDO rm -f "$file_name"
      PortMasterDialog "message" "- SUCCESS: $(basename $file_name)"
    else
      PortMasterDialog "message" "- FAILURE: $(basename $file_name)"
    fi

    touch "$controlfolder/.muos-refresh"
  done

  if [ -f "$controlfolder/autoinstall/PortMaster.zip" ]; then
    if [ ! -f "$file_name" ]; then
      continue
    fi

    file_name="$controlfolder/autoinstall/PortMaster.zip"

    if [[ $(PortMasterDialogResult "install" "$file_name") == "OKAY" ]]; then
      $ESUDO rm -f "$file_name"
      PortMasterDialog "message" "- SUCCESS: $(basename $file_name)"
    else
      PortMasterDialog "message" "- FAILURE: $(basename $file_name)"
    fi
  fi

  PortMasterDialog "messages_end"
  if [ -z "$GW" ]; then
    PortMasterDialogMessageBox "Finished running autoinstall.\n\nNo internet connection present so exiting."
    PortMasterDialogExit

    exit 0
  else
    PortMasterDialogMessageBox "Finished running autoinstall."
    PortMasterDialogExit
  fi
fi


export TERM=linux

# # Do it twice, it's just as nice!
# cat /dev/zero > /dev/fb0 2>/dev/null
# cat /dev/zero > /dev/fb0 2>/dev/null

pm_message "Starting PortMaster."

$ESUDO chmod -R +x .

unset LD_LIBRARY_PATH
unset SDL_GAMECONTROLLERCONFIG
PATH="$OLD_PATH"

__PORTMASTER__
fi
